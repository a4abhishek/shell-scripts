#!/usr/bin/env bash

# Ensure script stops on errors and propagates failures properly.
set -euo pipefail

# Source required libraries
SCRIPT_DIR="$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../lib" && pwd)"
# shellcheck source=/dev/null
. "$SCRIPT_DIR/core.sh"

# Preflight check for kubectl
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl is not installed"
        return 1
    fi
    return 0
}

# Register preflight checks
register_preflight check_kubectl

# Set script metadata
set_script_info \
    "Lists all containers and their images in a pod" \
    "k8s-containers [options] <pod>" \
    "  k8s-containers -n kube-system coredns-123456"

# Register flags
register_flag "namespace" "string" "Namespace to search in" "n"

# Register required positional argument
register_required_positional 1 "Pod name to inspect"

# Function to fetch and display container details
display_containers() {
    local title="$1"
    local output="$2"
    local pod_name="$3"

    # Check if output is empty
    if [[ -z "$output" ]]; then
        log_info "No ${title,,} found in pod '$pod_name'."
        return
    fi

    # Convert output to array format for table function
    local containers=()
    while IFS=$'\t' read -r name image; do
        name=$(echo -n "$name" | xargs)   # Trim spaces
        image=$(echo -n "$image" | xargs) # Trim spaces
        containers+=("$name/$image")
    done <<< "$output"

    # Define headers array for the table.
    local -a headers=("CONTAINER NAME" "IMAGE")
    # Mark headers as used to avoid SC2034.
    : "${headers[@]}"

    print_table "$title in Pod '$pod_name'" "/" headers containers
}

main() {
    # Parse flags
    parse_flags "$@" || exit 1

    # Get namespace flag value
    local namespace
    namespace=$(get_flag namespace)
    local namespace_arg=()
    [[ -n "$namespace" ]] && namespace_arg=(-n "$namespace")

    # Get pod name from positional args
    local pod
    pod=$(get_positional_args | head -n1)

    log_info "Fetching container details for pod: '$pod' ${namespace:+in namespace \"$namespace\"}..."

    # Fetch regular and init container details
    log_debug "Fetching regular containers..."
    local container_output
    container_output=$(kubectl get pod "$pod" "${namespace_arg[@]}" -o jsonpath='{range .spec.containers[*]}{.name}{"\t"}{.image}{"\n"}{end}')

    log_debug "Fetching init containers..."
    local init_container_output
    init_container_output=$(kubectl get pod "$pod" "${namespace_arg[@]}" -o jsonpath='{range .spec.initContainers[*]}{.name}{"\t"}{.image}{"\n"}{end}')

    # Display containers and init containers separately
    display_containers "Containers" "$container_output" "$pod"
    display_containers "Init Containers" "$init_container_output" "$pod"
}

# Run main function
main "$@"
