#!/usr/bin/env bash

# Ensure script stops on errors and propagates failures properly.
set -euo pipefail

# Source required libraries
SCRIPT_DIR="$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../lib" && pwd)"
# shellcheck source=/dev/null
. "$SCRIPT_DIR/core.sh"

# Preflight check for stdout being a terminal
check_stdout_terminal() {
    if ! [[ -t 1 ]]; then
        log_error "stdout must be connected to a terminal"
        return 1
    fi
    return 0
}

# Register preflight check
register_preflight check_stdout_terminal

# Preflight check for kubectl
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl is not installed"
        return 1
    fi
    return 0
}

# Register preflight checks
register_preflight check_kubectl

# Set script metadata
set_script_info \
    "Interactive deployment rollback utility" \
    "k8s-rollback [options] [deployment-name]" \
    "  # Interactive mode (no arguments)
  k8s-rollback

  # Direct rollback
  k8s-rollback my-deployment"

# Register flags
register_flag "interactive" "bool" "Run in interactive mode" "i" "false"

# Detect Namespace of a Given Deployment
get_deployment_namespace() {
    local deployment="$1"

    local namespace
    namespace=$(kubectl get deployment --all-namespaces -o custom-columns="NAMESPACE:.metadata.namespace,NAME:.metadata.name" \
        | awk -v dep="$deployment" '$2 == dep {print $1; exit}')

    if [[ -z "$namespace" ]]; then
        log_error "Deployment '$deployment' not found in any namespace."
        return 1
    fi

    echo "$namespace"
}

# Get Latest Revision of Deployment
get_latest_revision() {
    local deployment="$1"
    local namespace="$2"

    local latest_revision
    latest_revision=$(kubectl rollout history deployment/"$deployment" -n "$namespace" --no-headers 2> /dev/null | awk '{print $1}' | tail -n1)

    if [[ -z "$latest_revision" ]]; then
        log_error "No previous revision found for deployment '$deployment' in namespace '$namespace'."
        return 1
    fi

    echo "$latest_revision"
}

# Perform Rollback
rollback_deployment() {
    local deployment="$1"
    local namespace="$2"

    local latest_revision
    latest_revision=$(get_latest_revision "$deployment" "$namespace") || return 1

    log_info "Rolling back deployment '$deployment' to revision $latest_revision in namespace '$namespace'..."

    if kubectl rollout undo deployment/"$deployment" --to-revision="$latest_revision" -n "$namespace"; then
        log_success "Rollback successful! Monitor status using:"
        log_info "kubectl rollout status deployment/$deployment -n $namespace"
    else
        log_error "Rollback failed for deployment '$deployment' in namespace '$namespace'."
        return 1
    fi
}

# Interactive mode
interactive_mode() {
    while true; do
        deployment_name=$(prompt "\nðŸ“Œ Enter deployment name (or type 'exit' to quit): ")

        if [[ "$deployment_name" == "exit" ]]; then
            log_info "Exiting script."
            break
        fi

        # Dynamically find namespace for the deployment
        local namespace
        namespace=$(get_deployment_namespace "$deployment_name") || continue

        # Attempt rollback
        rollback_deployment "$deployment_name" "$namespace"
    done
}

main() {
    # Parse flags
    parse_flags "$@" || exit 1

    # Get interactive flag value
    local is_interactive
    is_interactive=$(get_flag interactive)

    # Get deployment name from positional args if provided
    local deployment_name
    deployment_name=$(get_positional_args | head -n1)

    # If no deployment name provided or interactive mode requested, run interactive mode
    if [[ -z "$deployment_name" ]] || [[ "$is_interactive" == "true" ]]; then
        interactive_mode
    else
        local namespace
        namespace=$(get_deployment_namespace "$deployment_name") || exit 1
        rollback_deployment "$deployment_name" "$namespace"
    fi
}

# Run main function
main "$@"
