#!/usr/bin/env bash

# Ensure script stops on errors and propagates failures properly.
set -euo pipefail

# Source required libraries
SCRIPT_DIR="$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../lib" && pwd)"
# shellcheck source=/dev/null
. "$SCRIPT_DIR/core.sh"

# Preflight check for kubectl
check_kubectl() {
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl is not installed"
        return 1
    fi
    return 0
}

# Preflight check for jq
check_jq() {
    if ! command -v jq &> /dev/null; then
        log_error "jq is not installed"
        return 1
    fi
    return 0
}

# Register preflight checks
register_preflight check_kubectl
register_preflight check_jq

# Usage function
usage() {
    log_error "Usage: $(basename "$0") [-n namespace] <configmap-name>"
    log_info "  -n : (Optional) Specify a namespace. If omitted, searches in all namespaces."
    exit 1
}

main() {
    # Default to querying all namespaces
    local namespace_flag="-A"
    local configmap_name=""

    # Parse arguments
    while getopts "n:" opt; do
        case "${opt}" in
            n)
                namespace_flag="-n ${OPTARG}"
                ;;
            *)
                usage
                ;;
        esac
    done
    shift $((OPTIND - 1))

    # Ensure a ConfigMap name is provided
    if [[ -z "$1" ]]; then
        log_error "ConfigMap name is required."
        usage
    fi

    configmap_name="$1"
    log_info "Searching for pods using ConfigMap: '$configmap_name' in ${namespace_flag/-A/'all namespaces'}..."

    # Find pods using the ConfigMap as a volume
    log_debug "Checking for ConfigMap usage as a volume..."
    mapfile -t pods_using_volume < <(kubectl get pods "$namespace_flag" -o json | jq -r \
        '.items[] | select(.spec.volumes[]?.configMap.name? == "'"$configmap_name"'") | .metadata.namespace + "/" + .metadata.name' | sort)

    # Find pods using the ConfigMap as an environment variable
    log_debug "Checking for ConfigMap usage as an environment variable..."
    mapfile -t pods_using_env < <(kubectl get pods "$namespace_flag" -o json | jq -r \
        '.items[] | select(.spec.containers[].env[]?.valueFrom.configMapKeyRef.name? == "'"$configmap_name"'") | .metadata.namespace + "/" + .metadata.name' | sort)

    # Display results in a prettified format
    local -a headers=("NAMESPACE" "POD NAME")
    # Mark headers as used to avoid SC2034
    : "${headers[@]}"
    if [[ ${#pods_using_volume[@]} -gt 0 ]]; then
        print_table "Pods using '$configmap_name' as a Volume" "/" headers pods_using_volume
    else
        log_info "No pods found using '$configmap_name' as a Volume"
    fi

    if [[ ${#pods_using_env[@]} -gt 0 ]]; then
        print_table "Pods using '$configmap_name' as an Environment Variable" "/" headers pods_using_env
    else
        log_info "No pods found using '$configmap_name' as an Environment Variable"
    fi
}

# Run main function
main "$@"
