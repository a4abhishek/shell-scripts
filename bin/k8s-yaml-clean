#!/usr/bin/env bash
set -euo pipefail

# Source required libraries
SCRIPT_DIR="$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")")/../lib" && pwd)"
# shellcheck source=/dev/null
. "$SCRIPT_DIR/core.sh"

# Set script metadata
set_script_info \
    "Clean and format Kubernetes YAML by removing read-only fields" \
    "k8s-yaml-clean [options] < input.yaml" \
    "  # Clean and format a deployment YAML
  cat deployment.yaml | k8s-yaml-clean

  # Clean with color output
  kubectl get deployment myapp -o yaml | k8s-yaml-clean"

# Register flags
register_flag "no-color" "bool" "Disable colored output" "n" "false"

# Preflight check for required commands
check_requirements() {
    local commands=("yq")
    for cmd in "${commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            log_error "Required command not found: $cmd"
            return 1
        fi
    done
    return 0
}
register_preflight check_requirements

# Check if stdin is a pipe
check_stdin_pipe() {
    if [[ -t 0 ]]; then
        log_error "No input provided. Please pipe YAML content to this script."
        log_info "Example: cat deployment.yaml | $(basename "$0")"
        return 1
    fi
    return 0
}
register_preflight check_stdin_pipe

# Main processing function
main() {
    # Parse flags
    parse_flags "$@" || exit 1

    # Get no-color flag value
    local no_color
    no_color=$(get_flag no-color)

    # Determine output command based on flags and available tools
    local COLOR_CMD="yq"
    if [[ "$no_color" != "true" ]] && command -v bat &> /dev/null; then
        COLOR_CMD="bat --language yaml --paging=never"
    fi

    # Read YAML from STDIN.
    local input_yaml
    input_yaml=$(cat)

    # Remove read-only and system-generated fields using yq.
    # Fields removed:
    #   - .status (entire block)
    #   - .metadata.creationTimestamp, .metadata.generation, .metadata.resourceVersion, .metadata.uid
    #   - .metadata.annotations."deployment.kubernetes.io/revision"
    #   - .metadata.annotations."kubectl.kubernetes.io/last-applied-configuration"
    #   - .spec.template.metadata.creationTimestamp
    local cleaned_yaml
    cleaned_yaml=$(echo "$input_yaml" | yq eval '
      del(
        .status,
        .metadata.creationTimestamp,
        .metadata.generation,
        .metadata.resourceVersion,
        .metadata.uid,
        .metadata.annotations."deployment.kubernetes.io/revision",
        .metadata.annotations."kubectl.kubernetes.io/last-applied-configuration",
        .spec.template.metadata.creationTimestamp
      )
    ' -)

    # Print the cleaned YAML with color if possible.
    echo "$cleaned_yaml" | eval "$COLOR_CMD"
}

# Execute main function
main "$@"
